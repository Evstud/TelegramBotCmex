import asyncio
import random
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from sqlite import create_profile, create_diary, edit_cmex_id, edit_cmex_iq, get_diary, db_start, get_cmex_id_iq, get_profile_by_username


async def on_startup(_):
    await db_start()


class ProfileStatesGroup(StatesGroup):
    laught_or_not = State()
    voice = State()
    answer = State()
    diary_list_state = State()
    second_voice = State()
    chat = State()


load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=storage)

ADMINS_ID = os.getenv('admid')
USERS_ID = os.getenv('usid')
# bot_id = os.getenv('bot_id')
# bot_id = 5894971527
questions_to_send = ['–ß–∞—Å—Ç–æ –ª–∏ –í—ã —Å–º–µ–µ—Ç–µ—Å—å?', '–°–º–µ–µ—Ç–µ—Å—å –ª–∏ –í—ã —á–∞—Å—Ç–æ?']


@dp.message_handler(commands=['start'])
async def button_1(message: types.Message):
    markup = InlineKeyboardMarkup()
    await create_profile(message.from_id, message.from_user.username)
    button = InlineKeyboardButton(text='–î–∞ \U0001F44D', callback_data='first_question_yes')
    markup.add(button)
    button2 = InlineKeyboardButton(text='–ù–µ—Ç \U0001F44E', callback_data='first_question_no')
    markup.add(button2)
    await bot.send_message(message.chat.id, "–ü–æ—Å–º–µ–µ–º—Å—è?", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'first_question_yes')
async def fqyes(call: types.callback_query):
    await bot.answer_callback_query(call.id)
    await ProfileStatesGroup.voice.set()
    kb = [
        [
            types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞—É–¥–∏–æ'
    )
    await bot.send_message(call.message.chat.id,
                           '–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º. –ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å, –≥–¥–µ –í—ã —Å–º–µ–µ—Ç–µ—Å—å –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥.',
                           reply_markup=keyboard)


@dp.message_handler(content_types=['voice', 'text'], state=ProfileStatesGroup.voice)
async def load_voice(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="\U0001F606 –ü—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton(text="\U0001F4DD –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ú–µ–Ω—é'
    )

    if message.voice:
        async with state.proxy() as data:
            data['voice'] = message.voice.file_id
            if message.voice.duration > 10:
                await edit_cmex_id(user_id=message.from_id)
                await edit_cmex_iq(message.from_id, round(message.voice.duration/10, 2))

                await message.reply("–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–º–µ–µ—Ç–µ—Å—å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –≥–¥–µ –º—ã —Å–º–µ–µ–º—Å—è –≤–º–µ—Å—Ç–µ,"
                                " –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –¥–µ–ª–∏–º—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏."
                                "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: (—Å–∫–∏–Ω—É –Ω–∏–∂–µ)", reply_markup=keyboard)
            else:
                await message.reply("–°–º–µ—Ö –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∏–π.", reply_markup=keyboard)
    else:
        await message.reply("–ü—Ä–∏–µ–º –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=keyboard)

    await state.reset_state(with_data=False)


@dp.callback_query_handler(lambda c: c.data == 'first_question_no')
async def fqno(call: types.callback_query, state: FSMContext):
    await bot.answer_callback_query(call.id)
    kb = [
        [
            types.KeyboardButton(text="\U0001F606 –ü—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton(text="\U0001F4DD –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ú–µ–Ω—é'
    )

    await bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "\U0001F606 –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    cmex_id, cmex_iq = await get_cmex_id_iq(message.from_id)
    await bot.send_message(message.chat.id, "\U0001F606 –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å \n"
                                            "\n"
                                            f"\U00002B50 –°–º–µ—Ö ID: {cmex_id[0]}\n"
                                            f"ü§ì –°–º–µ—Ö IQ: {cmex_iq[0]}")


@dp.message_handler(lambda message: message.text == "\U0001F4DD –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
async def show_diary(message: types.Message, state: FSMContext):
    await ProfileStatesGroup.diary_list_state.set()
    mes_list = await get_diary(message.from_id)
    if mes_list.fetchall():
        async with state.proxy() as data:
            data['diary_index'] = 0
            data['diary'] = mes_list.fetchall()
            text_to_send = f"{data['diary'][data['diary_index']][1]}\n–û—Ç–≤–µ—Ç: {data['diary'][data['diary_index']][2]}"
        offers_kb = InlineKeyboardMarkup()
        forward = InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data="forward_offers")
        middle = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cans')
        back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_offers")
        offers_kb.row(back, middle, forward)
        await bot.send_message(message.chat.id, text_to_send, reply_markup=offers_kb)
    else:
        text_to_send = '–í –¥–Ω–µ–≤–Ω–∏–∫–µ –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'
        await bot.send_message(message.chat.id, text_to_send)
        await state.reset_state(with_data=False)


@dp.callback_query_handler(lambda c: c.data == 'forward_offers', state=ProfileStatesGroup.diary_list_state)
async def forward(call: types.callback_query, state: FSMContext):
    async with state.proxy() as data:
        data['diary_index'] += 1
        diary_length = len(data['diary']) - 1
        if diary_length < data['diary_index']:
            data['diary_index'] = 0
        text_to_send = f"{data['diary'][data['diary_index']][1]}\n–û—Ç–≤–µ—Ç: {data['diary'][data['diary_index']][2]}"
    offers_kb = InlineKeyboardMarkup()
    forward = InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data="forward_offers")
    middle = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cans')
    back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_offers")
    offers_kb.row(back, middle, forward)
    await bot.edit_message_text(text_to_send, call.message.chat.id, call.message.message_id, reply_markup=offers_kb)


@dp.callback_query_handler(lambda c: c.data == 'back_offers', state=ProfileStatesGroup.diary_list_state)
async def prev(call: types.callback_query, state: FSMContext):
    async with state.proxy() as data:
        data['diary_index'] -= 1
        if data['diary_index'] < 0:
            data['diary_index'] = len(data['diary']) - 1
        text_to_send = f"{data['diary'][data['diary_index']][1]}\n–û—Ç–≤–µ—Ç: {data['diary'][data['diary_index']][2]}"
    offers_kb = InlineKeyboardMarkup()
    forward = InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data="forward_offers")
    middle = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cans')
    back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_offers")
    offers_kb.row(back, middle, forward)
    await bot.edit_message_text(text_to_send, call.message.chat.id, call.message.message_id, reply_markup=offers_kb)


@dp.callback_query_handler(lambda c: c.data == 'cans', state=ProfileStatesGroup.diary_list_state)
async def prev(call: types.callback_query, state: FSMContext):
    await state.reset_state(with_data=False)    # await bot.send_message(message.chat.id, message.text)
    await bot.send_message(call.message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π')


async def for_periodic1(chat_ids):
    while True:
        times_to_repeat = random.randint(1, 2)
        day = 60*60*24
        for i in range(times_to_repeat):
            sleeping_period = random.randint(0, day)
            await asyncio.sleep(sleeping_period)
            day -= sleeping_period
            await periodic1(chat_ids)
            if i == 1:
                await asyncio.sleep(day)


async def periodic1(chat_ids):
    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–î–∞ \U0001F44D', callback_data='double_first_question_yes')
    markup.add(button)
    button2 = InlineKeyboardButton(text='–ù–µ—Ç \U0001F44E', callback_data='double_first_question_no')
    markup.add(button2)

    for id_u in chat_ids:
        await bot.send_message(id_u, "–ü–æ—Å–º–µ–µ–º—Å—è?", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'double_first_question_yes')
async def dfqyes(call: types.callback_query):
    await bot.answer_callback_query(call.id)
    await ProfileStatesGroup.second_voice.set()
    kb = [
        [
            types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞—É–¥–∏–æ'
    )
    await bot.send_message(call.message.chat.id,
                           '–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º. –ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å, –≥–¥–µ –í—ã —Å–º–µ–µ—Ç–µ—Å—å –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥.',
                           reply_markup=keyboard)


@dp.message_handler(content_types=['voice', 'text'], state=ProfileStatesGroup.second_voice)
async def load_voice(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="\U0001F606 –ü—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton(text="\U0001F4DD –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ú–µ–Ω—é'
    )

    if message.voice:
        status = await get_cmex_id_iq(message.from_id)
        if status[0] == '–°–º–µ—Ö–æ–ñ–¥—É–Ω':
            await message.reply("–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–º–µ–µ—Ç–µ—Å—å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –≥–¥–µ –º—ã —Å–º–µ–µ–º—Å—è –≤–º–µ—Å—Ç–µ,"
                    " –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –¥–µ–ª–∏–º—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏."
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: (—Å–∫–∏–Ω—É –Ω–∏–∂–µ)")

        await edit_cmex_id(user_id=message.from_id)
        await edit_cmex_iq(message.from_id, round(message.voice.duration/10, 2))
        await message.reply(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –°–º–µ—Ö IQ –≤—ã—Ä–æ—Å –Ω–∞ {round(message.voice.duration/10, 2)}", reply_markup=keyboard)

    else:
        await message.reply("–ü—Ä–∏–µ–º –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=keyboard)

    await state.reset_state(with_data=False)


@dp.callback_query_handler(lambda c: c.data == 'double_first_question_no')
async def dfqno(call: types.callback_query, state: FSMContext):
    await bot.answer_callback_query(call.id)
    kb = [
        [
            types.KeyboardButton(text="\U0001F606 –ü—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton(text="\U0001F4DD –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ú–µ–Ω—é'
    )

    await bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


async def periodic2(sleep_for, chat_ids, questions):
    i = 0
    while True:
        await asyncio.sleep(sleep_for)
        markup = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å \U0001F60C', callback_data='bot_question2')
        markup.add(button)

        for id in chat_ids:
            await bot.send_message(id, questions[i], reply_markup=markup)
        i += 1
        if len(questions) - 1 < i:
            i = 0


@dp.callback_query_handler(lambda c: c.data == 'bot_question2')
async def quest2(call: types.callback_query, state: FSMContext):
    async with state.proxy() as data:
        data['question_for_diary'] = call.message.text
        data['profile_id'] = call.message.chat.id
    await bot.answer_callback_query(call.id)

    await ProfileStatesGroup.answer.set()
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç')


@dp.message_handler(content_types=['text'], state=ProfileStatesGroup.answer)
async def answer2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answer'] = message.text
        await create_diary(
            question=data['question_for_diary'],
            response=data['answer'],
            profile_id=data['profile_id']
        )
    await state.reset_state(with_data=False)


@dp.message_handler(commands=['ball'])
@dp.message_handler(lambda message: '–ë–ª–∞–≥–æ–¥–∞—Ä—é' in message.text)
async def channel_ball(message: types.Message):
    await ProfileStatesGroup.chat.set()
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª, –±–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ')


@dp.message_handler(content_types=['text'], state=ProfileStatesGroup.chat)
async def chat_usernames(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMINS_ID:
        username_list = message.text.split(' ')
        cleaned_list = [i.strip(',') for i in username_list]
        for un in cleaned_list:
            user_id = await get_profile_by_username(un)
            if user_id[0]:
                await edit_cmex_iq(user_id[0], 30)
                await bot.send_message(user_id[0], '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –°–º–µ—Ö IQ –≤—ã—Ä–æ—Å –Ω–∞ 30')
    await state.finish()


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(periodic2(60*60*24, chat_ids=USERS_ID, questions=questions_to_send))
        loop.create_task(for_periodic1(USERS_ID))
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except (KeyboardInterrupt, SystemExit):
        pass
